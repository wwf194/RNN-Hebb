{
    "Type": "transform.RNNLIF",
    //"ClassPath": "transform.RNNLIF",
    "InitTasks":[],
    "Iteration.Time": 10,
    "Neurons":{
        "Input":{
            "Num":"__ToBeSet__"
        },
        "Recurrent":{
            //"Num": "__ToBeSet__",
            //"IsExciInhi": "__ToBeSet__",
            "Num":500, "IsExciInhi": "__ToBeSet__",
            "Excitatory.Ratio": 0.8, // Only applicable when Neurons.IsExciInhi.Recurrent==True
            //"Inhibitory":{},
            "NonLinear":"ReLU"
        },
        "Output":{
            "Num": "__ToBeSet__"
        },
        "Num": "$Neurons.Recurrent.Num"
    },
    "Loss":{
        "Prediction":{
            "Coefficient": 1.0,
            "Type": "CrossEntropyLossForSingleClassPrediction",
        },
        "WeightConstrain":{
            "Coefficient.__value__":"Adaptive",
            "Coefficient":{
                "Method": "Ratio2RefLoss",
                "Ratio": [0.05, 0.15],
                "Reference": "&Modules.CalculatePredictionLoss",
            },
            "GetWeightMethods":[
                "&*Modules.RecurrentLIFNeurons.FiringRate2RecurrentInput.GetWeight",
                "&*Modules.RecurrentLIFNeurons.FiringRate2Output.GetWeight"
            ],
        },
        "ActivityConstrain":{
            "Coefficient.__value__":"Adaptive", // Adapt coefficient so that constrain loss are kept at certain ratio of total loss.
            "Coefficient":{
                "Method": "Ratio2RefLoss",
                "Ratio": [0.05, 0.15],
                "Reference": "&Modules.CalculatePredictionLoss",
            },
            "Activity":[ // to be implemented.
                "membranePotentials", "recurrentInputs"
            ]
        },
    },
    "Modules":{
        "RecurrentLIFNeurons":{
            "Type":"RecurrentLIFLayer",
            "Subtype":"f(Wx+b)",
            "TimeConst": 0.1,
            "Neurons": "$~Neurons.Recurrent",
            "Modules":{
                "NonLinear":{
                    "Type": "NonLinear",
                    "Subtype":"$~~Neurons.Recurrent.NonLinear",
                },
                "FiringRate2RecurrentInput":{
                    "Type": "LinearLayer",
                    "Subtype": "Wx",
                    "IsExciInhi": "$~~Neurons.Recurrent.IsExciInhi",
                    "Input.Num": "$~~Neurons.Recurrent.Num",
                    "Output.Num": "$~~Neurons.Recurrent.Num",
                    "NoSelfConnection": true,
                    "Weight.Init":{
                        "Method": "KaimingNormal",
                        "Coefficient": 1.0e-0
                    }
                },
                "FiringRate2Output":{
                    "Type": "LinearLayer",
                    "Subtype": "Wx",
                    "IsExciInhi": "$~~Neurons.Recurrent.IsExciInhi",
                    "Input.Num": "$~~Neurons.Recurrent.Num",
                    "Output.Num": "$~~Neurons.Output.Num",                    
                },
                "MembranePotentialDecay": "Internal",
                "GenerateNoise":{
                    "Type": "GaussianNoise",
                    "Distribution": "Gaussian",
                    "Method": "Adaptive",
                    "SubMethod": "FromInputStd",
                    "StdRatio": 0.05,
                },
                "GetBias": {
                    "Type": "Bias",
                    "Size": "$~~Neurons.Recurrent.Num"
                },
            },
            "Dynamics":{
                "Run": "ClassMethod"
            }
        },
        "TransformInput":{
            "Type": "NonLinearLayer",
            "Subtype":"f(Wx+b)",
            "Input.Num":"$~Neurons.Input.Num",
            "Output.Num":"$~Neurons.Recurrent.Num",
            "Weight.Init":{
                "Method": "KaimingNormal",
                "Coefficient": 1.0e-0
            },
            "Bias": true,
            "NonLinear":"$~Neurons.Recurrent.NonLinear"
        },
        "PredictionLoss": "$~Loss.Prediction",
        "GetConstrainWeight":{
            "Type": "FunctionsOutputs",
            "Functions": "$~Loss.WeightConstrain.GetWeightMethods"
        },
        "WeightConstrainLoss":{
            "Type": "L2Loss",
            "Coefficient": "$~Loss.WeightConstrain.Coefficient",
        },
        "ActivityConstrainLoss":{
            "Type": "L2Loss",
            "Coefficient": "$~Loss.ActivityConstrain.Coefficient",
        },
        "GradientDescend":{
            "Type":"GradientDescend"
        }
    },
    "Dynamics":{
        "Run": "InternalMethod",
        "Iterate": "InternalMethod",
        "CalculateWeightConstrainLoss":{
            "In": ["refLoss"],
            "Out": ["weightConstrainLoss"],
            "Routings":[
                "&GetConstrainWeight |--> weightConstrain",
                "weightConstrain, refLoss |--> &WeightConstrainLoss |--> weightConstrainLoss"
            ]
        },
        "CalculateActivityConstrainLoss":{
            "In": ["activity", "refLoss"],
            "Out": ["activityConstrainLoss"],
            "Routings":[
                "activity, refLoss |--> &ActivityConstrainLoss |--> activityConstrainLoss"
            ]
        },
        "Optimize": "ClassMethod",
        "LogPerformance": "ClassMethod",
        "RunTrainBatch": "ClassMethod",
        "RunTestBatch": "ClassMethod",
        "LogActivity": "ClassMethod",
        "LogWeight": "ClassMethod",
    },
    "Analyze":{
        "ResponseAndWeightPairs":{
            "Recurrent":{
                "ResponseA": "FiringRateList", // Response A
                "ResponseB": "FiringRateList", // Response B
                "Weight": "RecurrentLIFNeurons.FiringRate2RecurrentInput.Weight" // Weight
            },
            "Output":{
                "ResponseA": "FiringRateList",
                "ResponseB": "OutputList",
                "Weight": "RecurrentLIFNeurons.FiringRate2Output.Weight",
            },
            "Input":{
                "ResponseA": "InputList",
                "ResponseB": "FiringRateList",
                "Weight": "TransformInput.Weight",
            }
        },
        "PCA":[
            "FiringRateLast"
        ],
    },
}