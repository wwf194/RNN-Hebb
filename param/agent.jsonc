{
    "Task": "$^param.task.Task",
    "HiddenNeurons.Num": 500,
    "HiddenNueorns.IsExciInhi": false,
    "InitTasks":[
        {
            "FunctionCall": [
                "&*SetModelInputOutput",
                //"&*Modules.Dataset.LoadData",
                "&*ParseParam",
            ]
        },
    ],
    "Modules":{
        //"Dataset":"$^param.image",
        "model":"$^param.model",
        "model.Input.Type": "dLDirection", //dXY
        "model.InputInit.Type": "__ToBeSet__",
        "model.ModulePath": "utils_torch.Modules.RNNLIF",
        "__ResolveBase__": true,
    },
    "Dynamics":{
        "InitBeforeEpochTrain":{
            "In": ["BatchParam", "OptimizeParam"],
            "Out": ["BatchNum"],
            "Routings":[
                "&^object.image.ClearBatches",
                "BatchParam, Type=Train |--> &^object.image.PrepareBatches",
                "&^object.image.GetBatchNum |--> BatchNum",
            ]
        },
        "Train":{
            "In":["BatchParam", "TrainParam"],
            "Out":[],
            "Routings": [
                "&^object.image.GetBatch |--> DataBatch",
                "DataBatch, Name=Input |--> &FilterFromDict |--> ModelInput",
                "DataBatch, Name=Output |--> &FilterFromDict |--> ModelOutputTarget",
                "ModelInput, ModelOutputTarget, TrainParam |--> &model.Dynamics.Train",
            ],
        },
        "InitBeforeEpochTest":{
            "In": ["BatchParam", "TrainParam"],
            "Out": ["BatchNum"],
            "Routings":[
                "&^object.image.ClearBatches",
                "BatchParam, Type=Test |--> &^object.image.PrepareBatches",
                "&^object.image.GetBatchNum |--> BatchNum",
            ]
        },
        "Test":{
            "In":["BatchParam", "TrainParam"],
            "Out":[],
            "Routings": [
                "&^object.image.GetBatch |--> DataBatch",
                "DataBatch, Name=Input |--> &FilterFromDict |--> ModelInput",
                "DataBatch, Name=Output |--> &FilterFromDict |--> ModelOutputTarget",
                "ModelInput, ModelOutputTarget, TrainParam |--> &model.Dynamics.Test",
            ],
        }
    }
}